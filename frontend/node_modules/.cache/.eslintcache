[{"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/index.js":"1","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/reportWebVitals.js":"2","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Landing.js":"3","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Home.js":"4","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/RegisterWithGoogle.js":"5","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Profile.js":"6","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/Functions.js":"7","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Articles.js":"8","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/LogInForm.js":"9","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/PasswordSetup.js":"10","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/MinProfile.js":"11","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/Layout.js":"12","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/RegisterForm.js":"13","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/EventBus.js":"14","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/AvatarUploader.js":"15","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Followings.js":"16","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Menu.js":"17","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/GoogleLinking.js":"18","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Following.js":"19","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Article.js":"20","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/SubmitOrEditArticle.js":"21","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Images.js":"22","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comments.js":"23","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/ImageWall.js":"24","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comment.js":"25"},{"size":2797,"mtime":1639018367479,"results":"26","hashOfConfig":"27"},{"size":402,"mtime":1636952330081,"results":"28","hashOfConfig":"27"},{"size":1292,"mtime":1638934245103,"results":"29","hashOfConfig":"27"},{"size":1232,"mtime":1639028518672,"results":"30","hashOfConfig":"27"},{"size":546,"mtime":1638934245127,"results":"31","hashOfConfig":"27"},{"size":8494,"mtime":1639037301813,"results":"32","hashOfConfig":"27"},{"size":2382,"mtime":1639042780591,"results":"33","hashOfConfig":"27"},{"size":3386,"mtime":1639037301809,"results":"34","hashOfConfig":"27"},{"size":2838,"mtime":1639037301811,"results":"35","hashOfConfig":"27"},{"size":3267,"mtime":1639037301824,"results":"36","hashOfConfig":"27"},{"size":2864,"mtime":1639037301823,"results":"37","hashOfConfig":"27"},{"size":382,"mtime":1638683046102,"results":"38","hashOfConfig":"27"},{"size":7820,"mtime":1639037301825,"results":"39","hashOfConfig":"27"},{"size":548,"mtime":1638786294363,"results":"40","hashOfConfig":"27"},{"size":3546,"mtime":1639037301815,"results":"41","hashOfConfig":"27"},{"size":4901,"mtime":1639037301816,"results":"42","hashOfConfig":"27"},{"size":2075,"mtime":1639037301821,"results":"43","hashOfConfig":"27"},{"size":2062,"mtime":1639037301817,"results":"44","hashOfConfig":"27"},{"size":1581,"mtime":1639037301812,"results":"45","hashOfConfig":"27"},{"size":5809,"mtime":1639037301819,"results":"46","hashOfConfig":"27"},{"size":3975,"mtime":1639037301818,"results":"47","hashOfConfig":"27"},{"size":733,"mtime":1639036499091,"results":"48","hashOfConfig":"27"},{"size":2859,"mtime":1639037301820,"results":"49","hashOfConfig":"27"},{"size":3412,"mtime":1639037301814,"results":"50","hashOfConfig":"27"},{"size":4531,"mtime":1639037301822,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"d6p46e",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/index.js",[],["110","111"],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/reportWebVitals.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Landing.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Home.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/RegisterWithGoogle.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Profile.js",["112"],"import React, {useEffect} from \"react\";\nimport {Button, Card, Row, Col, DatePicker, Divider, Form, Input, message} from \"antd\";\nimport {formItemLayout, tailFormItemLayout} from \"../util/Layout\";\nimport moment from \"moment\";\nimport MyMediaMenu from \"./Menu\";\nimport EventBus from \"../util/EventBus\";\nimport {disabledDate, showBackendMessage} from \"../util/Functions\";\nimport AvatarUploader from \"./AvatarUploader\";\nimport PasswordSetup from \"./PasswordSetup\";\nimport GoogleLinking from \"./GoogleLinking\";\n\n\nconst Profile = () => {\n    message.config({\n        rtl: false,\n    });\n    const [form] = Form.useForm();\n\n    const load = async () => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/profile\", {\n            method: \"GET\",\n            credentials: \"include\",\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            form.setFieldsValue({\n                \"username\": res.username,\n                \"displayedName\": res.displayedName,\n                \"email\": res.email,\n                \"phone\": res.phone,\n                \"dob\": moment(res.dob),\n                \"zipcode\": res.zipcode,\n                \"headline\": res.headline,\n            });\n        }).catch(err => message.error(err, 1));\n    };\n\n    useEffect(() => load(), []);\n\n    const style = {padding: '46px 0'};\n\n    const onFinish = async (values) => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/profile\", {\n            method: \"PUT\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                displayed_name: values.displayed_name,\n                phone: values.phone,\n                email: values.email,\n                zipcode: values.zipcode,\n                headline: values.headline,\n                dob: values.dob,\n            })\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            EventBus.dispatchEvent(\"reload_min_profile\");\n            EventBus.dispatchEvent(\"reload_articles\");\n            message.success(\"Update successfully!\");\n        }).catch(err => message.error(err, 1));\n    };\n\n    return (\n        <>\n            <MyMediaMenu/>\n            <Row gutter={{xs: 0, sm: 0, md: 0, lg: 0, xl: 0}} style={style}>\n                <Col className=\"gutter-row\" xs={0} sm={0} md={0} lg={6} xl={6}/>\n                <Col className=\"gutter-row\" xs={24} sm={24} md={24} lg={12} xl={12}>\n                    <Card>\n                        <Divider orientation=\"left\">Avatar</Divider>\n                        <AvatarUploader/>\n\n                        <Divider orientation=\"left\">Information</Divider>\n                        <Form {...formItemLayout}\n                            form={form}\n                            name=\"updateInformation\"\n                            autoComplete=\"off\"\n                            onFinish={onFinish}\n                        >\n                            <Form.Item name=\"username\"\n                                       label=\"Username\"\n                            >\n                                <span className=\"ant-form-text\" />\n                            </Form.Item>\n\n                            <Form.Item name=\"displayedName\"\n                                       label=\"Displayed Name\"\n                                       rules={[\n                                           {\n                                               pattern: /^[a-zA-Z][a-zA-Z0-9]*$/,\n                                               message: 'Your account name can contain lowercase and uppercase Latin letter and number. The first letter cannot be a number.'\n                                           },\n                                       ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                            <Form.Item name=\"headline\"\n                                       label=\"Headline\"\n                            >\n                                <Input.TextArea rows={4}/>\n                            </Form.Item>\n\n                            <Form.Item name=\"email\"\n                                       label=\"E-mail\"\n                                       rules={[\n                                           {\n                                               type: 'email',\n                                               message: 'Please input your valid E-mail like a@b.co!',\n                                           },\n                                           {\n                                               required: true,\n                                               message: 'Please input your E-mail!',\n                                           },\n                                       ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                            <Form.Item name=\"phone\"\n                                       label=\"Phone Number\"\n                                       rules={[\n                                           {\n                                               pattern: /^[0-9]{10}$/,\n                                               message: 'Please input your phone number like 1231231234!'\n                                           },\n                                           {\n                                               required: true,\n                                               message: 'Please input your phone number!',\n                                           },\n                                       ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                            <Form.Item name=\"dob\"\n                                       label=\"Date of Birth\"\n                                       rules={[\n                                           {\n                                               required: true,\n                                               message: 'Please input your date of birth!',\n                                           },\n                                       ]}\n                                       extra=\"Only individuals 18 years of age or older on the day of registration are allowed to register.\"\n                            >\n                                <DatePicker format={'MM/DD/YYYY'}\n                                            style={{width: '100%'}}\n                                            disabledDate={disabledDate}/>\n                            </Form.Item>\n\n                            <Form.Item name=\"zipcode\"\n                                       label=\"Zipcode\"\n                                       rules={[\n                                           {\n                                               pattern: /^[0-9]{5}$/,\n                                               message: 'Please input your phone zipcode like 12345!'\n                                           },\n                                           {\n                                               required: true,\n                                               message: 'Please input your phone zipcode!',\n                                           },\n                                       ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                            <Form.Item {...tailFormItemLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Update\n                                </Button>\n                            </Form.Item>\n                        </Form>\n\n                        <Divider orientation=\"left\">Linking your Google Account</Divider>\n                        <GoogleLinking/>\n\n                        <Divider orientation=\"left\">Password</Divider>\n                        <PasswordSetup/>\n\n                    </Card>\n                </Col>\n                <Col className=\"gutter-row\" xs={0} sm={0} md={0} lg={6} xl={6}/>\n            </Row>\n        </>\n    )\n}\n\nexport default Profile;\n","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/Functions.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Articles.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/LogInForm.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/PasswordSetup.js",["113"],"import React from 'react';\nimport {Button, Form, Input, message} from \"antd\";\nimport {formItemLayout, tailFormItemLayout} from \"../util/Layout\";\nimport {showBackendMessage} from \"../util/Functions\";\n\n\nconst PasswordSetup = () => {\n    message.config({\n        rtl: false,\n    });\n\n    const onFinish = async (values) => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/password\", {\n            method: \"PUT\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                newPassword: values.newPassword,\n                oldPassword: values.curPassword,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else if (res.status === 401) {\n                throw \"The old password is wrong!\";\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            message.success(\"Update successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    return (\n        <Form {...formItemLayout}\n              name=\"updatePassword\"\n              autoComplete=\"off\"\n              onFinish={onFinish}\n        >\n            <Form.Item name=\"curPassword\"\n                       label=\"Current Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your current password!',\n                           }\n                       ]}\n\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item name=\"newPassword\"\n                       label=\"New Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your new password!',\n                           }\n                       ]}\n\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item\n                name=\"newPasswordConfirmation\"\n                label=\"Confirmation\"\n                dependencies={['newPassword']}\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please confirm your new password!',\n                    },\n                    ({getFieldValue}) => ({\n                        validator(_, value) {\n                            if (!value || getFieldValue('newPassword') === value) {\n                                return Promise.resolve();\n                            }\n                            return Promise.reject(new Error('The two passwords you entered do not match!'));\n                        },\n                    }),\n                ]}\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item {...tailFormItemLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Update\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default PasswordSetup;\n","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/MinProfile.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/Layout.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/RegisterForm.js",["114"],"import React, {useEffect, useState} from \"react\";\nimport {Button, DatePicker, Form, Input, message, Space} from \"antd\";\nimport {formItemLayout, tailFormItemLayout} from \"../util/Layout\";\nimport {useHistory} from \"react-router-dom\";\nimport {disabledDate, showBackendMessage} from \"../util/Functions\";\nimport Cookies from \"js-cookie\";\nimport EventBus from \"../util/EventBus\";\n\nconst RegisterForm = () => {\n\n    message.config({\n        rtl: false,\n    });\n    const [form] = Form.useForm();\n    const history = useHistory();\n    const [username, setUsername] = useState(\"\");\n    const [displayedName, setDisplayedName] = useState(\"\")\n    const [email, setEmail] = useState(\"\");\n\n\n    const load = () => {\n        setUsername(Cookies.get(\"usernameForGoogle\"));\n        setDisplayedName(Cookies.get(\"displayedNameForGoogle\"));\n        setEmail(Cookies.get(\"emailForGoogle\"));\n    }\n\n    useEffect(() => {\n        form.setFieldsValue({\n            \"username\": username,\n            \"displayedName\": displayedName,\n            \"email\": email,\n        });\n    }, [username, displayedName, email]);\n\n    useEffect(load, []);\n\n    EventBus.addEventListener(\"clear_all_states\", () => {\n        setUsername(\"\");\n        setDisplayedName(\"\");\n        setEmail(\"\");\n    });\n    EventBus.addEventListener(\"reload_all\", load);\n\n    const onFinish = async (values) => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/register\",{\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({\n                username: values.username,\n                email: values.email,\n                phone: values.phone,\n                dob: values.dob.toDate(),\n                zipcode: values.zipcode,\n                displayedName: values.displayedName,\n                password: values.password\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            message.success(\"Register successfully!\");\n            history.push({\n                pathname:\"/home\"\n            });\n        }).catch(err => message.error(err, 1));\n    };\n\n    return (\n        <Form {...formItemLayout}\n              name=\"register\"\n              layout=\"horizontal\"\n              autoComplete=\"off\"\n              onFinish={onFinish}\n              form={form}\n        >\n            <Form.Item name=\"username\"\n                       label=\"Username\"\n                       rules={[\n                           {\n                               pattern: /^[a-zA-Z][a-zA-Z0-9]*$/,\n                               message: 'Your account name can contain lowercase and uppercase Latin letter and number. The first letter cannot be a number.'\n                           },\n                           {\n                               required: true,\n                               message: 'Please input your username!',\n                           }\n                       ]}\n            >\n                <Input/>\n            </Form.Item>\n\n            <Form.Item name=\"displayedName\"\n                       label=\"Displayed Name\"\n                       rules={[\n                           {\n                               pattern: /^[a-zA-Z][a-zA-Z0-9]*$/,\n                               message: 'Your account name can contain lowercase and uppercase Latin letter and number. The first letter cannot be a number.'\n                           },\n                       ]}\n            >\n                <Input/>\n            </Form.Item>\n\n            <Form.Item name=\"email\"\n                       label=\"E-mail\"\n                       rules={[\n                           {\n                               type: 'email',\n                               message: 'Please input your valid E-mail like a@b.co!',\n                           },\n                           {\n                               required: true,\n                               message: 'Please input your E-mail!',\n                           },\n                       ]}\n            >\n                <Input placeholder=\"a@b.co\"/>\n            </Form.Item>\n\n            <Form.Item name=\"phone\"\n                       label=\"Phone Number\"\n                       rules={[\n                           {\n                               pattern: /^[0-9]{10}$/,\n                               message: 'Please input your phone number like 1231231234!'\n                           },\n                           {\n                               required: true,\n                               message: 'Please input your phone number!',\n                           },\n                       ]}\n            >\n                <Input placeholder=\"1231231234\"/>\n            </Form.Item>\n\n            <Form.Item name=\"dob\"\n                       label=\"Date of Birth\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your date of birth!',\n                           },\n                       ]}\n                       extra=\"Only individuals 18 years of age or older on the day of registration are allowed to register.\"\n            >\n                <DatePicker format={'MM/DD/YYYY'}\n                            style={{width: '100%'}}\n                            disabledDate={disabledDate}/>\n            </Form.Item>\n\n            <Form.Item name=\"zipcode\"\n                       label=\"Zipcode\"\n                       rules={[\n                           {\n                               pattern: /^[0-9]{5}$/,\n                               message: 'Please input your phone zipcode like 12345!'\n                           },\n                           {\n                               required: true,\n                               message: 'Please input your phone zipcode!',\n                           },\n                       ]}\n            >\n                <Input placeholder=\"12345\"/>\n            </Form.Item>\n\n            <Form.Item name=\"password\"\n                       label=\"Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your password!',\n                           }\n                       ]}\n\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item\n                name=\"passwordConfirmation\"\n                label=\"Confirmation\"\n                dependencies={['password']}\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please confirm your password!',\n                    },\n                    ({getFieldValue}) => ({\n                        validator(_, value) {\n                            if (!value || getFieldValue('password') === value) {\n                                return Promise.resolve();\n                            }\n                            return Promise.reject(new Error('The two passwords you entered do not match!'));\n                        },\n                    }),\n                ]}\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n\n            <Form.Item {...tailFormItemLayout}>\n                <Space size={8}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    <Button htmlType=\"reset\">\n                        Reset\n                    </Button>\n                </Space>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default RegisterForm;\n","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/util/EventBus.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/AvatarUploader.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Followings.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Menu.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/GoogleLinking.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Following.js",["115","116"],"import React, {useEffect, useState} from \"react\";\nimport {Avatar, Button, List, message} from \"antd\";\nimport {showBackendMessage} from \"../util/Functions\";\n\n\nconst Following = (props) => {\n\n    message.config({\n        rtl: false,\n    });\n\n    const [username, setUsername] = useState(props.username);\n    const [avatar, setAvatar] = useState(\"\");\n    const [displayedName, setDisplayedName] = useState(\"\");\n    const [headline, setHeadline] = useState(\"\");\n\n    const load = async () => {\n        if (!username) return;\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/profile/\" + username, {\n            method: \"GET\",\n            credentials: \"include\",\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            setAvatar(res.avatar);\n            setDisplayedName(res.displayedName);\n            setHeadline(res.headline);\n        }).catch(err => message.error(err, 1));\n    };\n\n    useEffect(() => load(), []);\n\n    const onClick = async () => {\n        props.action(username)();\n    }\n\n    return (\n        <List.Item actions={[\n            <Button type=\"text\" onClick={onClick}>\n                {props.actionSymbol}\n            </Button>,\n        ]}>\n            <List.Item.Meta\n                avatar={<Avatar src={avatar}/>}\n                title={displayedName}\n                description={headline}\n            />\n        </List.Item>\n    )\n};\n\nexport default Following;\n","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Article.js",["117","118"],"import React, {useEffect, useState} from \"react\";\nimport {Avatar, Button, Card, List, message} from \"antd\";\nimport {DeleteOutlined, EditOutlined, MessageOutlined} from \"@ant-design/icons\";\nimport SubmitOrEditArticle from \"./SubmitOrEditArticle\";\nimport Comments from \"./Comments\";\nimport {showBackendMessage} from \"../util/Functions\";\nimport Images from \"./Images\";\n\n\nconst Article = (props) => {\n    message.config({\n        rtl: false,\n    });\n\n    const [id, setId] = useState(props.id);\n    const [author, setAuthor] = useState(\"\");\n    const [authorDisplayedName, setAuthorDisplayedName] = useState(\"\");\n    const [avatar, setAvatar] = useState(\"\");\n    const [hideComments, setHideComments] = useState(true);\n    const [hideEditor, setHideEditor] = useState(true);\n    const [title, setTitle] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [timestamp, setTimeStamp] = useState(\"\");\n    const [imageUrlList, setImageUrlList] = useState([]);\n    const [commentIdList, setCommentIdList] = useState([]);\n\n\n\n    useEffect(() => {\n        const load = async () => {\n            await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/article/\" + id, {\n                method: \"GET\",\n                credentials: \"include\",\n            }).then(res => {\n                if (res.ok) {\n                    showBackendMessage();\n                    return res.json();\n                } else {\n                    throw res.statusText;\n                }\n            }).then(async res => {\n                setAuthor(res.author);\n                setTitle(res.title);\n                setText(res.text);\n                setTimeStamp(new Date(res.timestamp).toLocaleString());\n                setImageUrlList(imageUrlList => res.imageUrlList);\n                setCommentIdList(commentIdList => res.commentIdList);\n                await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/profile/\" + res.author, {\n                    method: \"GET\",\n                    credentials: \"include\",\n                }).then(res => {\n                    if (res.ok) {\n                        showBackendMessage();\n                        return res.json();\n                    } else {\n                        throw res.statusText;\n                    }\n                }).then(res => {\n                    setAuthorDisplayedName(res.displayedName);\n                    setAvatar(res.avatar);\n                });\n            }).catch(err => message.error(err, 1));\n        };\n        load();\n    }, [props.id]);\n\n    const onDelete = async () => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/article/\" + id, {\n            method: \"DELETE\",\n            credentials: \"include\",\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            props.deleteAction(props.id);\n            message.success(\"Delete successfully!\");\n        }).catch(err => message.error(err, 1));\n    };\n\n    const onEditArticle = (values) => {\n        setTitle(values.title);\n        setText(values.text);\n        setTimeStamp(values.timestamp);\n        setImageUrlList(imageUrlList => values.images);\n        setHideEditor(true);\n    };\n\n    return (\n        <div>\n            <List.Item\n                key={props.title}\n                actions={\n                    props.username === author ? [\n                        <Button type=\"link\" onClick={() => setHideComments(!hideComments)}>\n                            <MessageOutlined/>Comment\n                        </Button>,\n                        <Button type=\"link\" onClick={() => setHideEditor(!hideEditor)}>\n                            <EditOutlined/>Edit\n                        </Button>,\n                        <Button type=\"link\" onClick={async () => {\n                            setHideComments(true);\n                            setHideEditor(true);\n                            await onDelete();\n                        }}>\n                            <DeleteOutlined />Delete\n                        </Button>,\n                    ] : [\n                        <Button type=\"link\" onClick={() => setHideComments(!hideComments)}>\n                            <MessageOutlined/>Comment\n                        </Button>,\n                    ]\n                }\n                extra={\n                    imageUrlList && imageUrlList.length !== 0 ?\n                    <Images images={imageUrlList}/> :\n                    <></>\n                }\n            >\n                <List.Item.Meta\n                    avatar={<Avatar src={avatar}/>}\n                    title={title}\n                    description={\n                        <div>\n                            <span>\n                                {authorDisplayedName},\n                            </span>\n                            <span>\n                                {(new Date(timestamp)).toLocaleString()}\n                            </span>\n                        </div>\n                    }/>\n                {text}\n            </List.Item>\n            <div hidden={hideEditor}>\n                <Card border=\"true\">\n                    <SubmitOrEditArticle\n                        action={onEditArticle}\n                        id={props.id}\n                        title={title}\n                        text={text}\n                        imageUrlsList={imageUrlList}\n                    />\n                </Card>\n            </div>\n            <div hidden={hideComments}>\n                <Card border=\"true\">\n                    <Comments commentIdList={commentIdList} articleId={id}/>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nexport default Article;","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/SubmitOrEditArticle.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Images.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comments.js",[],"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/ImageWall.js",["119"],"// TODO: The wall is using a \"stack\", need to become \"array(vector).\"\nimport React, {memo, useEffect, useState} from \"react\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport {Modal, Upload} from \"antd\";\nimport EventBus from \"../util/EventBus\";\nimport {stringArrayEqual} from \"../util/Functions\";\n\n\nconst getBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nconst urlsToFiles = (urls) => {\n    if (urls) {\n        return urls.map((item) => {\n            let fileName = item.split(\"/\").slice(-1)[0];\n            let fileUid = fileName.split(\".\").slice(0, -1).join(\"\");\n            return {\n                uid: fileUid,\n                name: fileName,\n                status: 'done',\n                url: item,\n            }\n        })\n    } else {\n        return [];\n    }\n}\n\nconst ImagesWall = (props) => {\n    const [previewVisible, setPreviewVisible] = useState(false);\n    const [previewImage, setPreviewImage] = useState(\"\");\n    const [previewTitle, setPreviewTitle] = useState(\"\");\n    const [fileList, setFileList] = useState(urlsToFiles(props.imageUrlsList));\n\n    useEffect(() => {\n        setFileList(fileList => urlsToFiles(props.imageUrlsList));\n    }, [props]);\n\n    const handleCancel = () => {\n        setPreviewVisible(false);\n    }\n\n    const handlePreview = async (file) => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n        setPreviewImage(file.url || file.preview);\n        setPreviewVisible(true);\n        setPreviewTitle(\n            file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\n        );\n    };\n\n    const handleChange = ({ fileList }) => {\n        setFileList(fileList);\n        let fileListStatus = [];\n        fileList.forEach(item => fileListStatus.push(item.status));\n        if (fileListStatus.every(item => item === \"done\")) {\n            let curImageUrlsList = [];\n            for (let file of fileList) {\n                curImageUrlsList.push(file.url || file.response.url);\n            }\n            props.action(imageUrlsList => curImageUrlsList);\n        }\n    };\n\n    const uploadButton = (\n        <div>\n            <PlusOutlined />\n            <div style={{ marginTop: 8 }}>Upload</div>\n        </div>\n    );\n\n    return (\n        <>\n            <Upload\n                name=\"image\"\n                action=\"https://comp531-rw48-mymedia-backend.herokuapp.com/upload/image\"\n                withCredentials={true}\n                listType=\"picture-card\"\n                fileList={fileList}\n                onPreview={handlePreview}\n                onChange={handleChange}\n            >\n                {fileList.length >= 8 ? null : uploadButton}\n            </Upload>\n            <Modal\n                visible={previewVisible}\n                title={previewTitle}\n                footer={null}\n                onCancel={handleCancel}\n            >\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n        </>\n    );\n};\n\nconst areEqualImagesWall = (prevProps, nextProps) => {\n    return stringArrayEqual(prevProps.imageUrlsList, nextProps.imageUrlsList);\n}\n\nexport default memo(ImagesWall, areEqualImagesWall);\n","/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comment.js",["120","121"],"import React, {useEffect, useState} from \"react\";\nimport {Button, Input, Comment as AntdComment, message} from \"antd\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {showBackendMessage} from \"../util/Functions\";\n\nconst Comment = (props) => {\n    message.config({\n        rtl: false,\n    });\n\n    const [hideEditor, setHideEditor] = useState(true);\n    const [id, setId] = useState(props.id);\n    const [username, setUsername] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n    const [authorDisplayedName, setAuthorDisplayedName] = useState(\"\");\n    const [avatar, setAvatar] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    const [timeStamp, setTimeStamp] = useState(0);\n\n    const load = async () => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/comment/\" + id, {\n            method: \"GET\",\n            credentials: \"include\"\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(async res => {\n            setAuthor(res.author);\n            setUsername(res.username);\n            setText(res.text);\n            setTimeStamp(res.timestamp);\n            await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/profile/\" + res.author, {\n                method: \"GET\",\n                credentials: \"include\",\n            }).then(res => {\n                if (res.ok) {\n                    showBackendMessage();\n                    return res.json();\n                } else {\n                    throw res.statusText;\n                }\n            }).then(res => {\n                setAuthorDisplayedName(res.displayedName);\n                setAvatar(res.avatar);\n            }).catch(err => message.error(err, 1));\n        }).catch(err => message.error(err, 1));\n    }\n\n    const onDelete = async () => {\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/comment/\" + id, {\n            method: \"DELETE\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                articleId: props.articleId,\n            })\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            props.deleteAction(props.id);\n            message.success(\"Delete successfully!\");\n        }).catch(err => message.error(err, 1));\n    };\n\n    const onSubmit = async (value) => {\n        if (!value) {\n            message.error(\"Please input your comment!\", 1);\n            return;\n        }\n        await fetch(\"https://comp531-rw48-mymedia-backend.herokuapp.com/comment/\" + id, {\n            method: \"PUT\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                text: value,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            setText(res.text);\n            message.success(\"Update successfully!\");\n        }).catch(err => message.error(err, 1));\n    }\n\n    useEffect(() => load(), []);\n\n    return (\n        <li>\n        <AntdComment\n            author={authorDisplayedName}\n            avatar={avatar}\n            content={text}\n            actions={\n                username === author ? [\n                    <Button type=\"link\" onClick={() => setHideEditor(!hideEditor)}>\n                        <EditOutlined/>Edit\n                    </Button>,\n                    <Button type=\"link\" onClick={async () => {\n                        setHideEditor(true)\n                        await onDelete();\n                    }}>\n                        <DeleteOutlined/>Delete\n                    </Button>\n                ] : []\n            }\n            datetime={(new Date(timeStamp)).toLocaleString()}\n        />\n        <div hidden={hideEditor}>\n            <Input.Search\n                allowClear\n                onSearch={onSubmit}\n                defaultValue={text}\n                enterButton=\"Comment\"\n            />\n        </div>\n        </li>\n    )\n};\n\nexport default Comment;\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":43,"column":29,"nodeType":"128","endLine":43,"endColumn":31,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":28,"column":17,"nodeType":"132","messageId":"133","endLine":28,"endColumn":52},{"ruleId":"126","severity":1,"message":"134","line":33,"column":8,"nodeType":"128","endLine":33,"endColumn":40,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":12,"column":22,"nodeType":"138","messageId":"139","endLine":12,"endColumn":33},{"ruleId":"126","severity":1,"message":"127","line":36,"column":29,"nodeType":"128","endLine":36,"endColumn":31,"suggestions":"140"},{"ruleId":"136","severity":1,"message":"141","line":15,"column":16,"nodeType":"138","messageId":"139","endLine":15,"endColumn":21},{"ruleId":"126","severity":1,"message":"142","line":65,"column":8,"nodeType":"128","endLine":65,"endColumn":18,"suggestions":"143"},{"ruleId":"136","severity":1,"message":"144","line":5,"column":8,"nodeType":"138","messageId":"139","endLine":5,"endColumn":16},{"ruleId":"136","severity":1,"message":"141","line":12,"column":16,"nodeType":"138","messageId":"139","endLine":12,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":103,"column":29,"nodeType":"128","endLine":103,"endColumn":31,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","ArrayExpression",["148"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["149"],"no-unused-vars","'setUsername' is assigned a value but never used.","Identifier","unusedVar",["150"],"'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["151"],"'EventBus' is defined but never used.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"153","fix":"157"},{"desc":"158","fix":"159"},{"desc":"153","fix":"160"},"Update the dependencies array to be: [load]",{"range":"161","text":"162"},"Update the dependencies array to be: [username, displayedName, email, form]",{"range":"163","text":"164"},{"range":"165","text":"162"},"Update the dependencies array to be: [id, props.id]",{"range":"166","text":"167"},{"range":"168","text":"162"},[1437,1439],"[load]",[1056,1088],"[username, displayedName, email, form]",[1109,1111],[2515,2525],"[id, props.id]",[3525,3527]]