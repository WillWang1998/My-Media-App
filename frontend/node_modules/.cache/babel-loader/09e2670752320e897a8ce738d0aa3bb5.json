{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/hw6-frontend-WillWang1998/src/component/LogInForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { message, Button, Form, Input } from \"antd\";\nimport { formItemLayout, tailFormItemLayout } from './Landing';\nimport { logIn } from \"../actions\";\nimport { connect, useStore } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\"; // TODO: Refactor with hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LogInForm = props => {\n  _s();\n\n  const history = useHistory();\n  const store = useStore();\n  message.config({\n    rtl: false\n  });\n\n  const onFinish = values => {\n    props.logIn({\n      userName: values.userName,\n      password: values.password\n    });\n    let curState = store.getState();\n\n    if (curState.isAuthenticated) {\n      message.success(curState.logInOrRegisterMessage, 1).then(r => {\n        history.push({\n          pathname: \"/home\"\n        });\n      });\n    } else {\n      message.error(curState.logInOrRegisterMessage);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, { ...formItemLayout,\n    name: \"logIn\",\n    autoComplete: \"off\",\n    layout: \"horizontal\",\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"userName\",\n      label: \"Username\",\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"password\",\n      label: \"Password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailFormItemLayout,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LogInForm, \"syFGckt8P7ZuZu+Pn9UpaS4UVzs=\", false, function () {\n  return [useHistory, useStore];\n});\n\n_c = LogInForm;\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logIn: values => dispatch(logIn(values))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"LogInForm\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/hw6-frontend-WillWang1998/src/component/LogInForm.js"],"names":["React","message","Button","Form","Input","formItemLayout","tailFormItemLayout","logIn","connect","useStore","useHistory","LogInForm","props","history","store","config","rtl","onFinish","values","userName","password","curState","getState","isAuthenticated","success","logInOrRegisterMessage","then","r","push","pathname","error","required","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {message, Button, Form, Input} from \"antd\";\nimport {formItemLayout, tailFormItemLayout} from './Landing';\nimport {logIn} from \"../actions\";\nimport {connect, useStore} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\n\n// TODO: Refactor with hook\n\nconst LogInForm = (props) => {\n    const history = useHistory();\n    const store = useStore();\n    message.config({\n        rtl: false,\n    });\n\n    const onFinish = (values) => {\n        props.logIn({\n            userName: values.userName,\n            password: values.password,\n        });\n        let curState = store.getState();\n        if (curState.isAuthenticated) {\n            message.success(curState.logInOrRegisterMessage, 1).then(r => {\n                history.push({\n                    pathname: \"/home\",\n                });\n            });\n        } else {\n            message.error(curState.logInOrRegisterMessage);\n        }\n    };\n\n    return (\n        <Form {...formItemLayout}\n              name=\"logIn\"\n              autoComplete=\"off\"\n              layout=\"horizontal\"\n              onFinish={onFinish}\n        >\n\n            <Form.Item name=\"userName\"\n                       label=\"Username\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your username!',\n                           }\n                       ]}\n            >\n                <Input/>\n            </Form.Item>\n\n            <Form.Item name=\"password\"\n                       label=\"Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your password!',\n                           }\n                       ]}\n            >\n                <Input.Password/>\n            </Form.Item>\n\n            <Form.Item {...tailFormItemLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Log in\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        logIn: (values) => dispatch(logIn(values)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInForm);"]},"metadata":{},"sourceType":"module"}