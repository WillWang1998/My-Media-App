{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useRef, useState } from \"react\";\nimport { Card, Input, List, message } from \"antd\";\nimport Comment from \"./Comment\";\nimport { showBackendMessage, stringArrayEqual } from \"../util/Functions\"; // TODO: Comments sort\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = props => {\n  _s();\n\n  message.config({\n    rtl: false\n  });\n  const commentRef = useRef();\n  const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n  useEffect(() => {\n    setCommentIdList(commentIdList => props.commentIdList);\n  }, [props]);\n\n  const addNewComment = async value => {\n    if (!value) {\n      message.error(\"Please input your comment!\", 1);\n      return;\n    }\n\n    await fetch(\"http://localhost:4000/comment\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        articleID: props.articleId,\n        text: value\n      })\n    }).then(res => {\n      if (res.ok) {\n        showBackendMessage();\n        return res.json();\n      } else {\n        throw res.statusText;\n      }\n    }).then(res => {\n      setCommentIdList(commentIdList => res.comments);\n      commentRef.current.setValue(\"\");\n      message.success(\"Comment Successfully!\", 1);\n    }).catch(err => message.error(err, 1));\n  };\n\n  const onDeleteComment = id => {\n    setCommentIdList(commentIdList => commentIdList.filter(item => {\n      return item !== id;\n    }));\n  };\n\n  const MemoList = _props => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      header: `${_props.commentIdList ? _props.commentIdList.length : 0} replies`,\n      itemLayout: \"horizontal\",\n      dataSource: _props.commentIdList,\n      renderItem: item => /*#__PURE__*/_jsxDEV(Comment, {\n        articleId: props.articleId,\n        id: item,\n        deleteAction: onDeleteComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  };\n\n  const areEqualMemoList = (prevProps, nextProps) => {\n    return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n  };\n\n  /*#__PURE__*/\n  memo(MemoList, areEqualMemoList);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(MemoList, {\n      commentIdList: commentIdList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      allowClear: true,\n      onSearch: addNewComment,\n      ref: commentRef,\n      enterButton: \"Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}; // const areEqualComments = (prevProps, nextProps) => {\n//     return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n// }\n//\n// export default memo(Comments, areEqualComments);\n\n\n_s(Comments, \"J2WCihGp7B6tATs2Oe/m17nvujU=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/Comments.js"],"names":["React","memo","useEffect","useRef","useState","Card","Input","List","message","Comment","showBackendMessage","stringArrayEqual","Comments","props","config","rtl","commentRef","commentIdList","setCommentIdList","addNewComment","value","error","fetch","method","credentials","headers","body","JSON","stringify","articleID","articleId","text","then","res","ok","json","statusText","comments","current","setValue","success","catch","err","onDeleteComment","id","filter","item","MemoList","_props","length","areEqualMemoList","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, {memo, useEffect, useRef, useState} from \"react\";\nimport {Card, Input, List, message} from \"antd\";\nimport Comment from \"./Comment\";\nimport {showBackendMessage, stringArrayEqual} from \"../util/Functions\";\n\n\n// TODO: Comments sort\nconst Comments = (props) => {\n    message.config({\n        rtl: false,\n    });\n\n    const commentRef = useRef();\n    const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n    useEffect(() => {\n        setCommentIdList(commentIdList => props.commentIdList);\n    }, [props]);\n\n    const addNewComment = async (value) => {\n        if (!value) {\n            message.error(\"Please input your comment!\", 1);\n            return;\n        }\n        await fetch(\"http://localhost:4000/comment\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                articleID: props.articleId,\n                text: value,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            setCommentIdList(commentIdList => res.comments);\n            commentRef.current.setValue(\"\");\n            message.success(\"Comment Successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    const onDeleteComment = (id) => {\n        setCommentIdList(commentIdList => commentIdList.filter((item) => {\n            return item !== id;\n        }));\n    }\n\n\n    const MemoList = (_props) => {\n        return (\n            <List\n                header={`${_props.commentIdList ? _props.commentIdList.length : 0} replies`}\n                itemLayout=\"horizontal\"\n                dataSource={_props.commentIdList}\n                renderItem={item => <Comment articleId={props.articleId}\n                                             id={item}\n                                             deleteAction={onDeleteComment}/>}\n            />\n        )\n    }\n\n    const areEqualMemoList = (prevProps, nextProps) => {\n        return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n    }\n\n    memo(MemoList, areEqualMemoList);\n\n    return (\n        <Card>\n            <MemoList commentIdList={commentIdList}/>\n            <Input.Search\n                allowClear\n                onSearch={addNewComment}\n                ref={commentRef}\n                enterButton=\"Comment\"/>\n        </Card>\n    )\n}\n\n// const areEqualComments = (prevProps, nextProps) => {\n//     return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n// }\n//\n// export default memo(Comments, areEqualComments);\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}