{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/ImageWall.js\",\n    _s = $RefreshSig$();\n\n// TODO: The wall is using a \"stack\", need to become \"array(vector).\"\nimport React, { memo, useState } from \"react\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { Modal, Upload } from \"antd\";\nimport EventBus from \"../util/EventBus\";\nimport { stringArrayEqual } from \"../util/Functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n};\n\nconst ImagesWall = props => {\n  _s();\n\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState(\"\");\n  const [previewTitle, setPreviewTitle] = useState(\"\");\n  const [fileList, setFileList] = useState(props.imageUrlsList ? props.imageUrlsList.map(item => {\n    let fileName = item.split(\"/\").slice(-1)[0];\n    let fileUid = fileName.split(\".\").slice(0, -1).join(\"\");\n    console.log({\n      uid: fileUid,\n      name: fileName,\n      status: 'done',\n      url: item\n    });\n    return {\n      uid: fileUid,\n      name: fileName,\n      status: 'done',\n      url: item\n    };\n  }) : []);\n\n  const handleCancel = () => {\n    setPreviewVisible(false);\n  };\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setPreviewImage(file.url || file.preview);\n    setPreviewVisible(true);\n    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));\n  };\n\n  const handleChange = ({\n    fileList\n  }) => {\n    setFileList(fileList);\n    console.log(\"fileList\", fileList);\n    let fileListStatus = [];\n    fileList.forEach(item => fileListStatus.push(item.status));\n\n    if (fileListStatus.every(item => item === \"done\")) {\n      let curImageUrlsList = [];\n\n      for (let file of fileList) {\n        curImageUrlsList.push(file.url || file.response.url);\n      }\n\n      console.log(\"curImageUrlsList\", curImageUrlsList);\n      props.action(imageUrlsList => curImageUrlsList);\n    }\n  };\n\n  const uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Upload, {\n      name: \"image\",\n      action: \"http://localhost:4000/upload/image\",\n      withCredentials: true,\n      listType: \"picture-card\",\n      fileList: fileList,\n      onPreview: handlePreview,\n      onChange: handleChange,\n      children: fileList.length >= 8 ? null : uploadButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: previewVisible,\n      title: previewTitle,\n      footer: null,\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"example\",\n        style: {\n          width: '100%'\n        },\n        src: previewImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ImagesWall, \"tTi6YsxSbOYzwpNFvrTYWeiU6d8=\");\n\n_c = ImagesWall;\n\nconst areEqualImagesWall = (prevProps, nextProps) => {\n  console.log(\"prevProps, nextProps\", prevProps, nextProps);\n  return stringArrayEqual(prevProps.imageUrlsList, nextProps.imageUrlsList);\n};\n\nexport default _c2 = /*#__PURE__*/memo(ImagesWall, areEqualImagesWall);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImagesWall\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/ImageWall.js"],"names":["React","memo","useState","PlusOutlined","Modal","Upload","EventBus","stringArrayEqual","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","ImagesWall","props","previewVisible","setPreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","fileList","setFileList","imageUrlsList","map","item","fileName","split","slice","fileUid","join","console","log","uid","name","status","url","handleCancel","handlePreview","preview","originFileObj","substring","lastIndexOf","handleChange","fileListStatus","forEach","push","every","curImageUrlsList","response","action","uploadButton","marginTop","length","width","areEqualImagesWall","prevProps","nextProps"],"mappings":"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","sourcesContent":["// TODO: The wall is using a \"stack\", need to become \"array(vector).\"\nimport React, {memo, useState} from \"react\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport {Modal, Upload} from \"antd\";\nimport EventBus from \"../util/EventBus\";\nimport {stringArrayEqual} from \"../util/Functions\";\n\n\nconst getBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nconst ImagesWall = (props) => {\n    const [previewVisible, setPreviewVisible] = useState(false);\n    const [previewImage, setPreviewImage] = useState(\"\");\n    const [previewTitle, setPreviewTitle] = useState(\"\");\n    const [fileList, setFileList] = useState(\n        props.imageUrlsList ?\n            props.imageUrlsList.map((item) => {\n                let fileName = item.split(\"/\").slice(-1)[0];\n                let fileUid = fileName.split(\".\").slice(0, -1).join(\"\");\n                console.log({\n                    uid: fileUid,\n                    name: fileName,\n                    status: 'done',\n                    url: item,\n                });\n                return {\n                    uid: fileUid,\n                    name: fileName,\n                    status: 'done',\n                    url: item,\n                }\n            }) :\n            []\n    );\n\n    const handleCancel = () => {\n        setPreviewVisible(false);\n    }\n\n    const handlePreview = async (file) => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n        setPreviewImage(file.url || file.preview);\n        setPreviewVisible(true);\n        setPreviewTitle(\n            file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\n        );\n    };\n\n    const handleChange = ({ fileList }) => {\n        setFileList(fileList);\n        console.log(\"fileList\", fileList);\n        let fileListStatus = [];\n        fileList.forEach(item => fileListStatus.push(item.status));\n        if (fileListStatus.every(item => item === \"done\")) {\n            let curImageUrlsList = [];\n            for (let file of fileList) {\n                curImageUrlsList.push(file.url || file.response.url);\n            }\n            console.log(\"curImageUrlsList\", curImageUrlsList);\n            props.action(imageUrlsList => curImageUrlsList);\n        }\n    };\n\n    const uploadButton = (\n        <div>\n            <PlusOutlined />\n            <div style={{ marginTop: 8 }}>Upload</div>\n        </div>\n    );\n\n    return (\n        <>\n            <Upload\n                name=\"image\"\n                action=\"http://localhost:4000/upload/image\"\n                withCredentials={true}\n                listType=\"picture-card\"\n                fileList={fileList}\n                onPreview={handlePreview}\n                onChange={handleChange}\n            >\n                {fileList.length >= 8 ? null : uploadButton}\n            </Upload>\n            <Modal\n                visible={previewVisible}\n                title={previewTitle}\n                footer={null}\n                onCancel={handleCancel}\n            >\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n        </>\n    );\n};\n\nconst areEqualImagesWall = (prevProps, nextProps) => {\n    console.log(\"prevProps, nextProps\", prevProps, nextProps);\n    return stringArrayEqual(prevProps.imageUrlsList, nextProps.imageUrlsList);\n}\n\nexport default memo(ImagesWall, areEqualImagesWall);\n"]},"metadata":{},"sourceType":"module"}