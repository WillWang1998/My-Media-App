{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { Card, Input, List, message } from \"antd\";\nimport Comment from \"./Comment\";\nimport { showBackendMessage, stringArrayEqual } from \"../util/Functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = props => {\n  _s();\n\n  message.config({\n    rtl: false\n  });\n  const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n  const addNewComment = async value => {\n    await fetch(\"http://localhost:4000/comment\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        articleID: props.articleId,\n        text: value\n      })\n    }).then(res => {\n      if (res.ok) {\n        showBackendMessage().then();\n        return res.json();\n      } else {\n        throw res.statusText;\n      }\n    }).then(res => {\n      console.log(\"res.comments\", res.comments);\n      setCommentIdList(res.comments);\n      message.success(\"Comment Successfully!\", 1);\n    }).catch(err => message.error(err, 1));\n  };\n\n  const onDeleteComment = id => {\n    setCommentIdList(commentIdList => commentIdList.filter(item => item !== id));\n  };\n\n  useEffect(() => {\n    console.log(\"commentIdList in Comments\", commentIdList);\n  }, [commentIdList]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      header: `${commentIdList ? commentIdList.length : 0} replies`,\n      itemLayout: \"horizontal\",\n      dataSource: commentIdList,\n      renderItem: item => /*#__PURE__*/_jsxDEV(Comment, {\n        articleId: props.articleId,\n        id: item,\n        username: props.username,\n        deleteAction: onDeleteComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      allowClear: true,\n      onSearch: addNewComment,\n      enterButton: \"Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Comments, \"kuDWyA2qA0dNiO4/Sq5HGr2mCy0=\");\n\n_c = Comments;\n\nconst areEqualComments = (prevProps, nextProps) => {\n  console.log(\"prevProps.commentIdList, nextProps.commentIdList\", prevProps.commentIdList, nextProps.commentIdList);\n  console.log(stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList));\n  return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n};\n\nexport default _c2 = /*#__PURE__*/memo(Comments, areEqualComments);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js"],"names":["React","memo","useEffect","useState","Card","Input","List","message","Comment","showBackendMessage","stringArrayEqual","Comments","props","config","rtl","commentIdList","setCommentIdList","addNewComment","value","fetch","method","credentials","headers","body","JSON","stringify","articleID","articleId","text","then","res","ok","json","statusText","console","log","comments","success","catch","err","error","onDeleteComment","id","filter","item","length","username","areEqualComments","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, {memo, useEffect, useState} from \"react\";\nimport {Card, Input, List, message} from \"antd\";\nimport Comment from \"./Comment\";\nimport {showBackendMessage, stringArrayEqual} from \"../util/Functions\";\n\nconst Comments = (props) => {\n    message.config({\n        rtl: false,\n    });\n\n    const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n    const addNewComment = async (value) => {\n        await fetch(\"http://localhost:4000/comment\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                articleID: props.articleId,\n                text: value,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage().then();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            console.log(\"res.comments\", res.comments);\n            setCommentIdList(res.comments);\n            message.success(\"Comment Successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    const onDeleteComment = (id) => {\n        setCommentIdList(commentIdList => commentIdList.filter((item) => item !== id));\n    }\n\n    useEffect(() => {\n        console.log(\"commentIdList in Comments\", commentIdList);\n    }, [commentIdList])\n\n    return (\n        <Card>\n            <List\n                header={`${commentIdList ? commentIdList.length : 0} replies`}\n                itemLayout=\"horizontal\"\n                dataSource={commentIdList}\n                renderItem={item => <Comment articleId={props.articleId}\n                                             id={item}\n                                             username={props.username}\n                                             deleteAction={onDeleteComment}/>}\n            />\n            <Input.Search\n                allowClear\n                onSearch={addNewComment}\n                enterButton=\"Comment\"/>\n        </Card>\n    )\n}\n\nconst areEqualComments = (prevProps, nextProps) => {\n    console.log(\"prevProps.commentIdList, nextProps.commentIdList\", prevProps.commentIdList, nextProps.commentIdList);\n    console.log(stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList));\n    return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n}\n\nexport default memo(Comments, areEqualComments);\n"]},"metadata":{},"sourceType":"module"}