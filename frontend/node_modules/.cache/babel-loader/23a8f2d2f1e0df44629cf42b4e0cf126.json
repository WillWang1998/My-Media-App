{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useRef, useState } from \"react\";\nimport { Card, Input, List, message } from \"antd\";\nimport Comment from \"./Comment\";\nimport { showBackendMessage, stringArrayEqual } from \"../util/Functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = props => {\n  _s();\n\n  message.config({\n    rtl: false\n  });\n  const commentRef = useRef();\n  const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n  useEffect(() => {\n    setCommentIdList(commentIdList => props.commentIdList);\n  }, [props]);\n\n  const addNewComment = async value => {\n    if (!value) {\n      message.error(\"Please input your comment!\", 1);\n      return;\n    }\n\n    await fetch(\"http://localhost:4000/comment\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        articleID: props.articleId,\n        text: value\n      })\n    }).then(res => {\n      if (res.ok) {\n        showBackendMessage();\n        return res.json();\n      } else {\n        throw res.statusText;\n      }\n    }).then(res => {\n      setCommentIdList(commentIdList => res.comments);\n      console.log(\"commentRef.current.state\", commentRef.current.state);\n      message.success(\"Comment Successfully!\", 1);\n    }).catch(err => message.error(err, 1));\n  };\n\n  const onDeleteComment = id => {\n    console.log(\"id\", id);\n    console.log(\"commentIdList\", commentIdList);\n    setCommentIdList(commentIdList => commentIdList.filter(item => item !== id));\n    console.log(\"commentIdList\", commentIdList);\n  };\n\n  useEffect(() => {\n    console.log(\"commentIdList\", commentIdList);\n  }, [commentIdList]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      header: `${commentIdList ? commentIdList.length : 0} replies`,\n      itemLayout: \"horizontal\",\n      dataSource: commentIdList,\n      renderItem: item => /*#__PURE__*/_jsxDEV(Comment, {\n        articleId: props.articleId,\n        id: item,\n        username: props.username,\n        deleteAction: onDeleteComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      allowClear: true,\n      onSearch: addNewComment,\n      ref: commentRef,\n      enterButton: \"Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Comments, \"NyKJD5NETlb4q+Ldl9SS+5bcw84=\");\n\n_c = Comments;\n\nconst areEqualComments = (prevProps, nextProps) => {\n  return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n};\n\nexport default _c2 = /*#__PURE__*/memo(Comments, areEqualComments);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js"],"names":["React","memo","useEffect","useRef","useState","Card","Input","List","message","Comment","showBackendMessage","stringArrayEqual","Comments","props","config","rtl","commentRef","commentIdList","setCommentIdList","addNewComment","value","error","fetch","method","credentials","headers","body","JSON","stringify","articleID","articleId","text","then","res","ok","json","statusText","comments","console","log","current","state","success","catch","err","onDeleteComment","id","filter","item","length","username","areEqualComments","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, {memo, useEffect, useRef, useState} from \"react\";\nimport {Card, Input, List, message} from \"antd\";\nimport Comment from \"./Comment\";\nimport {showBackendMessage, stringArrayEqual} from \"../util/Functions\";\n\nconst Comments = (props) => {\n    message.config({\n        rtl: false,\n    });\n\n    const commentRef = useRef();\n    const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n    useEffect(() => {\n        setCommentIdList(commentIdList => props.commentIdList);\n    }, [props]);\n\n    const addNewComment = async (value) => {\n        if (!value) {\n            message.error(\"Please input your comment!\", 1);\n            return;\n        }\n        await fetch(\"http://localhost:4000/comment\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                articleID: props.articleId,\n                text: value,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            setCommentIdList(commentIdList => res.comments);\n            console.log(\"commentRef.current.state\", commentRef.current.state);\n            message.success(\"Comment Successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    const onDeleteComment = (id) => {\n        console.log(\"id\", id);\n        console.log(\"commentIdList\", commentIdList);\n        setCommentIdList(commentIdList => commentIdList.filter((item) => item !== id));\n        console.log(\"commentIdList\", commentIdList);\n    }\n\n    useEffect(() => {\n        console.log(\"commentIdList\", commentIdList);\n    }, [commentIdList])\n\n    return (\n        <Card>\n            <List\n                header={`${commentIdList ? commentIdList.length : 0} replies`}\n                itemLayout=\"horizontal\"\n                dataSource={commentIdList}\n                renderItem={item => <Comment articleId={props.articleId}\n                                             id={item}\n                                             username={props.username}\n                                             deleteAction={onDeleteComment}/>}\n            />\n            <Input.Search\n                allowClear\n                onSearch={addNewComment}\n                ref={commentRef}\n                enterButton=\"Comment\"/>\n        </Card>\n    )\n}\n\nconst areEqualComments = (prevProps, nextProps) => {\n    return stringArrayEqual(prevProps.commentIdList, nextProps.commentIdList);\n}\n\nexport default memo(Comments, areEqualComments);\n"]},"metadata":{},"sourceType":"module"}