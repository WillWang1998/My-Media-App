{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState } from \"react\";\nimport { Card, Input, List, message } from \"antd\";\nimport Comment from \"./Comment\";\nimport { showBackendMessage } from \"../util/Functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = props => {\n  _s();\n\n  const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n  const addNewComment = async value => {\n    await fetch(\"http://localhost:4000/comment\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        articleID: props.articleId,\n        text: value\n      })\n    }).then(res => {\n      if (res.ok) {\n        showBackendMessage().then();\n        return res.json();\n      } else {\n        throw res.statusText;\n      }\n    }).then(res => {\n      // console.log(\"res.comments\", res.comments);\n      setCommentIdList(res.comments);\n      message.success(\"Comment Successfully!\", 1);\n    }).catch(err => message.error(err, 1));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      header: `${commentIdList ? commentIdList.length : 0} replies`,\n      itemLayout: \"horizontal\",\n      dataSource: commentIdList,\n      renderItem: item => /*#__PURE__*/_jsxDEV(Comment, {\n        id: item,\n        username: props.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      allowClear: true,\n      onSearch: addNewComment,\n      enterButton: \"Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Comments, \"e3xp3e320TZ4ZEccEbJuQVlx7RQ=\");\n\n_c = Comments;\n\nconst areEqualComments = (prevProps, nextProps) => {\n  return prevProps.commentIdList !== nextProps.commentIdList;\n};\n\nexport default _c2 = /*#__PURE__*/memo(Comments, areEqualComments);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Comments\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/Comments.js"],"names":["React","memo","useState","Card","Input","List","message","Comment","showBackendMessage","Comments","props","commentIdList","setCommentIdList","addNewComment","value","fetch","method","credentials","headers","body","JSON","stringify","articleID","articleId","text","then","res","ok","json","statusText","comments","success","catch","err","error","length","item","username","areEqualComments","prevProps","nextProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,IAAf,EAAqBC,QAArB,QAAoC,OAApC;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,OAA3B,QAAyC,MAAzC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,kBAAR,QAAiC,mBAAjC;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAACQ,KAAK,CAACC,aAAP,CAAlD;;AAEA,QAAME,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACnC,UAAMC,KAAK,CAAC,+BAAD,EAAkC;AACzCC,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,WAAW,EAAE,SAF4B;AAGzCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHgC;AAMzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,SAAS,EAAEZ,KAAK,CAACa,SADA;AAEjBC,QAAAA,IAAI,EAAEV;AAFW,OAAf;AANmC,KAAlC,CAAL,CAUHW,IAVG,CAUEC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,EAAR,EAAY;AACRnB,QAAAA,kBAAkB,GAAGiB,IAArB;AACA,eAAOC,GAAG,CAACE,IAAJ,EAAP;AACH,OAHD,MAGO;AACH,cAAMF,GAAG,CAACG,UAAV;AACH;AACJ,KAjBK,EAiBHJ,IAjBG,CAiBEC,GAAG,IAAI;AACX;AACAd,MAAAA,gBAAgB,CAACc,GAAG,CAACI,QAAL,CAAhB;AACAxB,MAAAA,OAAO,CAACyB,OAAR,CAAgB,uBAAhB,EAAyC,CAAzC;AACH,KArBK,EAqBHC,KArBG,CAqBGC,GAAG,IAAI3B,OAAO,CAAC4B,KAAR,CAAcD,GAAd,EAAmB,CAAnB,CArBV,CAAN;AAsBH,GAvBD;;AAyBA,sBACI,QAAC,IAAD;AAAA,4BACI,QAAC,IAAD;AACI,MAAA,MAAM,EAAG,GAAEtB,aAAa,GAAGA,aAAa,CAACwB,MAAjB,GAA0B,CAAE,UADxD;AAEI,MAAA,UAAU,EAAC,YAFf;AAGI,MAAA,UAAU,EAAExB,aAHhB;AAII,MAAA,UAAU,EAAEyB,IAAI,iBAAI,QAAC,OAAD;AAAS,QAAA,EAAE,EAAEA,IAAb;AAAmB,QAAA,QAAQ,EAAE1B,KAAK,CAAC2B;AAAnC;AAAA;AAAA;AAAA;AAAA;AAJxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD,CAAO,MAAP;AACI,MAAA,UAAU,MADd;AAEI,MAAA,QAAQ,EAAExB,aAFd;AAGI,MAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA1CD;;GAAMJ,Q;;KAAAA,Q;;AA4CN,MAAM6B,gBAAgB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAC/C,SAAOD,SAAS,CAAC5B,aAAV,KAA4B6B,SAAS,CAAC7B,aAA7C;AACH,CAFD;;AAIA,kCAAeV,IAAI,CAACQ,QAAD,EAAW6B,gBAAX,CAAnB","sourcesContent":["import React, {memo, useState} from \"react\";\nimport {Card, Input, List, message} from \"antd\";\nimport Comment from \"./Comment\";\nimport {showBackendMessage} from \"../util/Functions\";\n\nconst Comments = (props) => {\n    const [commentIdList, setCommentIdList] = useState(props.commentIdList);\n\n    const addNewComment = async (value) => {\n        await fetch(\"http://localhost:4000/comment\", {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                articleID: props.articleId,\n                text: value,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage().then();\n                return res.json();\n            } else {\n                throw res.statusText;\n            }\n        }).then(res => {\n            // console.log(\"res.comments\", res.comments);\n            setCommentIdList(res.comments);\n            message.success(\"Comment Successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    return (\n        <Card>\n            <List\n                header={`${commentIdList ? commentIdList.length : 0} replies`}\n                itemLayout=\"horizontal\"\n                dataSource={commentIdList}\n                renderItem={item => <Comment id={item} username={props.username}/>}\n            />\n            <Input.Search\n                allowClear\n                onSearch={addNewComment}\n                enterButton=\"Comment\"/>\n        </Card>\n    )\n}\n\nconst areEqualComments = (prevProps, nextProps) => {\n    return prevProps.commentIdList !== nextProps.commentIdList;\n}\n\nexport default memo(Comments, areEqualComments);\n"]},"metadata":{},"sourceType":"module"}