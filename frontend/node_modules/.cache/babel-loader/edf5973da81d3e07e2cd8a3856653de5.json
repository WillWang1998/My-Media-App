{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/hw6-frontend-WillWang1998/src/component/Followings.js\";\nimport React from \"react\";\nimport { Card, Avatar, List, Input, Button, Divider, message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { addNewFollowing, unfollow } from \"../actions\";\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\nimport { store } from \"../index\"; // TODO: 1. Virtualization for performance\n//       2. Sticky\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Followings = props => {\n  const addNewFollowing = userName => {\n    props.addNewFollowing({\n      userName: userName\n    });\n    let curState = store.getState();\n\n    if (curState.addFollowingMessage) {\n      message.config({\n        rtl: false\n      });\n      message.success(curState.addFollowingMessage, 1).then();\n    }\n  };\n\n  const createUnfollow = userName => {\n    return () => {\n      props.unfollow({\n        userName: userName\n      });\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bordered: true,\n    children: [/*#__PURE__*/_jsxDEV(Divider, {\n      orientation: \"left\",\n      children: \"My followings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input.Search, {\n      allowClear: true,\n      enterButton: \"Add Following\",\n      size: \"large\",\n      onSearch: addNewFollowing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dataSource: props.followings,\n      renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n        actions: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"text\",\n          onClick: createUnfollow(item.userName),\n          children: /*#__PURE__*/_jsxDEV(CloseCircleOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)],\n        children: /*#__PURE__*/_jsxDEV(List.Item.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: item.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 37\n          }, this),\n          title: item.userName,\n          description: item.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Followings;\n\nconst mapStateToProps = state => {\n  return {\n    followings: state.followings\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewFollowing: values => dispatch(addNewFollowing(values)),\n    unfollow: values => dispatch(unfollow(values))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Followings);\n\nvar _c;\n\n$RefreshReg$(_c, \"Followings\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/hw6-frontend-WillWang1998/src/component/Followings.js"],"names":["React","Card","Avatar","List","Input","Button","Divider","message","connect","addNewFollowing","unfollow","CloseCircleOutlined","store","Followings","props","userName","curState","getState","addFollowingMessage","config","rtl","success","then","createUnfollow","followings","item","avatar","status","mapStateToProps","state","mapDispatchToProps","dispatch","values"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Card, Avatar, List, Input, Button, Divider, message} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {addNewFollowing, unfollow} from \"../actions\";\nimport {CloseCircleOutlined} from \"@ant-design/icons\";\nimport {store} from \"../index\";\n\n// TODO: 1. Virtualization for performance\n//       2. Sticky\n\nconst Followings = (props) => {\n\n    const addNewFollowing = (userName) => {\n        props.addNewFollowing({\n            userName: userName,\n        });\n        let curState = store.getState();\n        if (curState.addFollowingMessage) {\n            message.config({\n                rtl: false,\n            });\n            message.success(curState.addFollowingMessage, 1).then();\n        }\n    }\n\n    const createUnfollow = (userName) => {\n        return () => {\n            props.unfollow({\n                userName: userName,\n            });\n        }\n    }\n\n    return (\n        <Card bordered={true}>\n            <Divider orientation=\"left\">My followings</Divider>\n            <Input.Search\n                allowClear\n                enterButton=\"Add Following\"\n                size=\"large\"\n                onSearch={addNewFollowing}\n            />\n            <List\n                dataSource={props.followings}\n                renderItem={(item) => (\n                    <List.Item actions={[\n                        <Button type=\"text\" onClick={createUnfollow(item.userName)}>\n                            <CloseCircleOutlined/>\n                        </Button>]}>\n                        <List.Item.Meta\n                            avatar={<Avatar src={item.avatar}/>}\n                            title={item.userName}\n                            description={item.status}\n                        />\n                    </List.Item>\n                )}\n            />\n        </Card>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        followings: state.followings\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addNewFollowing: (values) => dispatch(addNewFollowing(values)),\n        unfollow: (values) => dispatch(unfollow(values))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Followings);\n"]},"metadata":{},"sourceType":"module"}