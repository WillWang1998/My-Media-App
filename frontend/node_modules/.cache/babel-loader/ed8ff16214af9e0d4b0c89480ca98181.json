{"ast":null,"code":"import _objectSpread from\"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React from'react';import{Button,Form,Input,message}from\"antd\";import{formItemLayout,tailFormItemLayout}from\"../util/Layout\";import{showBackendMessage}from\"../util/Functions\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PasswordSetup=function PasswordSetup(){message.config({rtl:false});var onFinish=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:4000/password\",{method:\"PUT\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({newPassword:values.newPassword,oldPassword:values.curPassword})}).then(function(res){if(res.ok){showBackendMessage();return res.json();}else if(res.status===401){throw\"The old password is wrong!\";}else{throw res.statusText;}}).then(function(){message.success(\"Update successfully!\",1);}).catch(function(err){return message.error(err,1);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function onFinish(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Form,_objectSpread(_objectSpread({},formItemLayout),{},{name:\"updatePassword\",autoComplete:\"off\",onFinish:onFinish,children:[/*#__PURE__*/_jsx(Form.Item,{name:\"curPassword\",label:\"Current Password\",rules:[{required:true,message:'Please input your current password!'}],children:/*#__PURE__*/_jsx(Input.Password,{visibilityToggle:false})}),/*#__PURE__*/_jsx(Form.Item,{name:\"newPassword\",label:\"New Password\",rules:[{required:true,message:'Please input your new password!'}],children:/*#__PURE__*/_jsx(Input.Password,{visibilityToggle:false})}),/*#__PURE__*/_jsx(Form.Item,{name:\"newPasswordConfirmation\",label:\"Confirmation\",dependencies:['newPassword'],rules:[{required:true,message:'Please confirm your new password!'},function(_ref2){var getFieldValue=_ref2.getFieldValue;return{validator:function validator(_,value){if(!value||getFieldValue('newPassword')===value){return Promise.resolve();}return Promise.reject(new Error('The two passwords you entered do not match!'));}};}],children:/*#__PURE__*/_jsx(Input.Password,{visibilityToggle:false})}),/*#__PURE__*/_jsx(Form.Item,_objectSpread(_objectSpread({},tailFormItemLayout),{},{children:/*#__PURE__*/_jsx(Button,{type:\"primary\",htmlType:\"submit\",children:\"Update\"})}))]}));};export default PasswordSetup;","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/PasswordSetup.js"],"names":["React","Button","Form","Input","message","formItemLayout","tailFormItemLayout","showBackendMessage","PasswordSetup","config","rtl","onFinish","values","fetch","method","credentials","headers","body","JSON","stringify","newPassword","oldPassword","curPassword","then","res","ok","json","status","statusText","success","catch","err","error","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"mappings":"khBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,MAAR,CAAgBC,IAAhB,CAAsBC,KAAtB,CAA6BC,OAA7B,KAA2C,MAA3C,CACA,OAAQC,cAAR,CAAwBC,kBAAxB,KAAiD,gBAAjD,CACA,OAAQC,kBAAR,KAAiC,mBAAjC,C,wFAGA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxBJ,OAAO,CAACK,MAAR,CAAe,CACXC,GAAG,CAAE,KADM,CAAf,EAIA,GAAMC,CAAAA,QAAQ,0FAAG,iBAAOC,MAAP,wIACPC,CAAAA,KAAK,CAAC,gCAAD,CAAmC,CAC1CC,MAAM,CAAE,KADkC,CAE1CC,WAAW,CAAE,SAF6B,CAG1CC,OAAO,CAAE,CACL,eAAgB,kBADX,CAHiC,CAM1CC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBC,WAAW,CAAER,MAAM,CAACQ,WADH,CAEjBC,WAAW,CAAET,MAAM,CAACU,WAFH,CAAf,CANoC,CAAnC,CAAL,CAUHC,IAVG,CAUE,SAAAC,GAAG,CAAI,CACX,GAAIA,GAAG,CAACC,EAAR,CAAY,CACRlB,kBAAkB,GAClB,MAAOiB,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CAHD,IAGO,IAAIF,GAAG,CAACG,MAAJ,GAAe,GAAnB,CAAwB,CAC3B,KAAM,4BAAN,CACH,CAFM,IAEA,CACH,KAAMH,CAAAA,GAAG,CAACI,UAAV,CACH,CACJ,CAnBK,EAmBHL,IAnBG,CAmBE,UAAM,CACVnB,OAAO,CAACyB,OAAR,CAAgB,sBAAhB,CAAwC,CAAxC,EACH,CArBK,EAqBHC,KArBG,CAqBG,SAAAC,GAAG,QAAI3B,CAAAA,OAAO,CAAC4B,KAAR,CAAcD,GAAd,CAAmB,CAAnB,CAAJ,EArBN,CADO,uDAAH,kBAARpB,CAAAA,QAAQ,4CAAd,CAyBA,mBACI,MAAC,IAAD,gCAAUN,cAAV,MACM,IAAI,CAAC,gBADX,CAEM,YAAY,CAAC,KAFnB,CAGM,QAAQ,CAAEM,QAHhB,wBAKI,KAAC,IAAD,CAAM,IAAN,EAAW,IAAI,CAAC,aAAhB,CACW,KAAK,CAAC,kBADjB,CAEW,KAAK,CAAE,CACH,CACIsB,QAAQ,CAAE,IADd,CAEI7B,OAAO,CAAE,qCAFb,CADG,CAFlB,uBAUI,KAAC,KAAD,CAAO,QAAP,EAAgB,gBAAgB,CAAE,KAAlC,EAVJ,EALJ,cAkBI,KAAC,IAAD,CAAM,IAAN,EAAW,IAAI,CAAC,aAAhB,CACW,KAAK,CAAC,cADjB,CAEW,KAAK,CAAE,CACH,CACI6B,QAAQ,CAAE,IADd,CAEI7B,OAAO,CAAE,iCAFb,CADG,CAFlB,uBAUI,KAAC,KAAD,CAAO,QAAP,EAAgB,gBAAgB,CAAE,KAAlC,EAVJ,EAlBJ,cA+BI,KAAC,IAAD,CAAM,IAAN,EACI,IAAI,CAAC,yBADT,CAEI,KAAK,CAAC,cAFV,CAGI,YAAY,CAAE,CAAC,aAAD,CAHlB,CAII,KAAK,CAAE,CACH,CACI6B,QAAQ,CAAE,IADd,CAEI7B,OAAO,CAAE,mCAFb,CADG,CAKH,mBAAE8B,CAAAA,aAAF,OAAEA,aAAF,OAAsB,CAClBC,SADkB,oBACRC,CADQ,CACLC,KADK,CACE,CAChB,GAAI,CAACA,KAAD,EAAUH,aAAa,CAAC,aAAD,CAAb,GAAiCG,KAA/C,CAAsD,CAClD,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACH,CACD,MAAOD,CAAAA,OAAO,CAACE,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAU,6CAAV,CAAf,CAAP,CACH,CANiB,CAAtB,EALG,CAJX,uBAmBI,KAAC,KAAD,CAAO,QAAP,EAAgB,gBAAgB,CAAE,KAAlC,EAnBJ,EA/BJ,cAqDI,KAAC,IAAD,CAAM,IAAN,gCAAenC,kBAAf,4BACI,KAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,CAAuB,QAAQ,CAAC,QAAhC,oBADJ,GArDJ,IADJ,CA6DH,CA3FD,CA6FA,cAAeE,CAAAA,aAAf","sourcesContent":["import React from 'react';\nimport {Button, Form, Input, message} from \"antd\";\nimport {formItemLayout, tailFormItemLayout} from \"../util/Layout\";\nimport {showBackendMessage} from \"../util/Functions\";\n\n\nconst PasswordSetup = () => {\n    message.config({\n        rtl: false,\n    });\n\n    const onFinish = async (values) => {\n        await fetch(\"http://localhost:4000/password\", {\n            method: \"PUT\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                newPassword: values.newPassword,\n                oldPassword: values.curPassword,\n            }),\n        }).then(res => {\n            if (res.ok) {\n                showBackendMessage();\n                return res.json();\n            } else if (res.status === 401) {\n                throw \"The old password is wrong!\";\n            } else {\n                throw res.statusText;\n            }\n        }).then(() => {\n            message.success(\"Update successfully!\", 1);\n        }).catch(err => message.error(err, 1));\n    }\n\n    return (\n        <Form {...formItemLayout}\n              name=\"updatePassword\"\n              autoComplete=\"off\"\n              onFinish={onFinish}\n        >\n            <Form.Item name=\"curPassword\"\n                       label=\"Current Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your current password!',\n                           }\n                       ]}\n\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item name=\"newPassword\"\n                       label=\"New Password\"\n                       rules={[\n                           {\n                               required: true,\n                               message: 'Please input your new password!',\n                           }\n                       ]}\n\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item\n                name=\"newPasswordConfirmation\"\n                label=\"Confirmation\"\n                dependencies={['newPassword']}\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please confirm your new password!',\n                    },\n                    ({getFieldValue}) => ({\n                        validator(_, value) {\n                            if (!value || getFieldValue('newPassword') === value) {\n                                return Promise.resolve();\n                            }\n                            return Promise.reject(new Error('The two passwords you entered do not match!'));\n                        },\n                    }),\n                ]}\n            >\n                <Input.Password visibilityToggle={false}/>\n            </Form.Item>\n\n            <Form.Item {...tailFormItemLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Update\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default PasswordSetup;\n"]},"metadata":{},"sourceType":"module"}