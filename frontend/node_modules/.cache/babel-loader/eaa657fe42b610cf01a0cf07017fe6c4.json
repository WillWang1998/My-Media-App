{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/SubmitOrEditArticle.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from \"react\";\nimport { Input, Button, Form, Card, Divider, message } from \"antd\";\nimport { showBackendMessage, stringArrayEqual } from \"../util/Functions\";\nimport ImagesWall from \"./ImageWall\"; // TODO: React.lazy\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SubmitOrEditArticle = props => {\n  _s();\n\n  message.config({\n    rtl: false\n  });\n  const [form] = Form.useForm();\n  const [imageUrlsList, setImageUrlsList] = useState(props.imageUrlsList);\n  useEffect(() => {\n    form.setFieldsValue({\n      \"title\": props.title,\n      \"text\": props.text\n    });\n  }, [form, props]);\n\n  const onFinish = async values => {\n    console.log(\"imageUrlsList\", imageUrlsList);\n\n    if (props.id) {\n      await fetch(\"http://localhost:4000/article/\" + props.id, {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: values.title,\n          text: values.text,\n          images: imageUrlsList\n        })\n      }).then(res => {\n        if (res.ok) {\n          showBackendMessage();\n          return res.json();\n        } else {\n          throw res.statusText;\n        }\n      }).then(res => {\n        message.success(\"Edit Successfully\");\n        props.action({\n          id: res._id,\n          title: res.title,\n          text: res.text,\n          timestamp: res.timestamp,\n          images: res.images\n        });\n      }).catch(err => message.error(err, 1));\n    } else {\n      await fetch(\"http://localhost:4000/article\", {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: values.title,\n          text: values.text,\n          images: imageUrlsList\n        })\n      }).then(res => {\n        if (res.ok) {\n          showBackendMessage();\n          return res.json();\n        } else {\n          throw res.statusText;\n        }\n      }).then(res => {\n        message.success(\"Submit Successfully\", 1);\n        props.action(res._id);\n      }).catch(err => message.error(err, 1));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bordered: true,\n    children: [/*#__PURE__*/_jsxDEV(Divider, {\n      orientation: \"left\",\n      children: props.id ? \"Edit this article\" : \"Add new article\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onFinish: onFinish,\n      form: form,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"title\",\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"text\",\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(ImagesWall, {\n          imageUrlsList: imageUrlsList,\n          action: setImageUrlsList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: \"50%\"\n          },\n          htmlType: \"submit\",\n          type: \"primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: \"50%\"\n          },\n          htmlType: \"reset\",\n          type: \"default\",\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SubmitOrEditArticle, \"ffEJD2pppWBCWCvT/d/ktUzLH+I=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = SubmitOrEditArticle;\n\nconst areEqualSubmitOrEditArticle = (prevProps, nextProps) => {\n  return prevProps.id === nextProps.id && prevProps.title === nextProps.title && prevProps.text === nextProps.text && stringArrayEqual(prevProps.imageUrlsList, nextProps.imageUrlsList);\n};\n\nexport default _c2 = /*#__PURE__*/memo(SubmitOrEditArticle, areEqualSubmitOrEditArticle);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SubmitOrEditArticle\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-WillWang1998/src/component/SubmitOrEditArticle.js"],"names":["React","memo","useEffect","useState","Input","Button","Form","Card","Divider","message","showBackendMessage","stringArrayEqual","ImagesWall","SubmitOrEditArticle","props","config","rtl","form","useForm","imageUrlsList","setImageUrlsList","setFieldsValue","title","text","onFinish","values","console","log","id","fetch","method","credentials","headers","body","JSON","stringify","images","then","res","ok","json","statusText","success","action","_id","timestamp","catch","err","error","width","areEqualSubmitOrEditArticle","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, {memo, useEffect, useState} from \"react\";\nimport {Input, Button, Form, Card, Divider, message} from \"antd\";\nimport {showBackendMessage, stringArrayEqual} from \"../util/Functions\";\nimport ImagesWall from \"./ImageWall\";\n\n\n// TODO: React.lazy\nconst SubmitOrEditArticle = (props) => {\n    message.config({\n        rtl: false,\n    });\n    const [form] = Form.useForm();\n    const [imageUrlsList, setImageUrlsList] = useState(props.imageUrlsList);\n\n    useEffect(() => {\n        form.setFieldsValue({\n            \"title\": props.title,\n            \"text\": props.text,\n        });\n    }, [form, props]);\n\n    const onFinish = async (values) => {\n        console.log(\"imageUrlsList\", imageUrlsList);\n        if (props.id) {\n            await fetch(\"http://localhost:4000/article/\" + props.id, {\n                method: \"PUT\",\n                credentials: \"include\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    title: values.title,\n                    text: values.text,\n                    images: imageUrlsList,\n                }),\n            }).then(res => {\n                if (res.ok) {\n                    showBackendMessage();\n                    return res.json();\n                } else {\n                    throw res.statusText;\n                }\n            }).then(res => {\n                message.success(\"Edit Successfully\");\n                props.action({\n                    id: res._id,\n                    title: res.title,\n                    text: res.text,\n                    timestamp: res.timestamp,\n                    images: res.images,\n                });\n            }).catch(err => message.error(err, 1));\n        } else {\n            await fetch(\"http://localhost:4000/article\", {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    title: values.title,\n                    text: values.text,\n                    images: imageUrlsList,\n                }),\n            }).then(res => {\n                if (res.ok) {\n                    showBackendMessage();\n                    return res.json();\n                } else {\n                    throw res.statusText;\n                }\n            }).then(res => {\n                message.success(\"Submit Successfully\", 1);\n                props.action(res._id);\n            }).catch(err => message.error(err, 1));\n        }\n    }\n\n    return (\n        <Card bordered={true}>\n            <Divider orientation=\"left\">{\n                props.id ? \"Edit this article\" : \"Add new article\"\n            }</Divider>\n            <Form onFinish={onFinish} form={form}>\n                <Form.Item name=\"title\">\n                    <Input/>\n                </Form.Item>\n                <Form.Item name=\"text\">\n                    <Input.TextArea/>\n                </Form.Item>\n                <Form.Item>\n                    <ImagesWall\n                        imageUrlsList={imageUrlsList}\n                        action={setImageUrlsList} />\n                </Form.Item>\n                <Form.Item>\n                    <Button style={{width: \"50%\"}} htmlType=\"submit\" type=\"primary\">\n                        Submit\n                    </Button>\n                    <Button style={{width: \"50%\"}} htmlType=\"reset\" type=\"default\">\n                        Clear\n                    </Button>\n                </Form.Item>\n            </Form>\n        </Card>\n    )\n}\n\nconst areEqualSubmitOrEditArticle = (prevProps, nextProps) => {\n    return prevProps.id === nextProps.id\n        && prevProps.title === nextProps.title\n        && prevProps.text === nextProps.text\n        && stringArrayEqual(prevProps.imageUrlsList, nextProps.imageUrlsList);\n}\n\nexport default memo(SubmitOrEditArticle, areEqualSubmitOrEditArticle);\n"]},"metadata":{},"sourceType":"module"}