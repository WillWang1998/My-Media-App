{"ast":null,"code":"var _jsxFileName = \"/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/AvatarUploader.js\",\n    _s = $RefreshSig$();\n\n// TODO: Uploader animation\nimport React, { useEffect, useState } from \"react\";\nimport { beforeUpload, handleResponse, showError } from \"../util/Functions\";\nimport EventBus from \"../util/EventBus\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, message, Upload } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AvatarUploader = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const [uploaded, setUploaded] = useState(false);\n\n  const load = async () => {\n    await fetch(\"http://localhost:4000/avatar\", {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(res => handleResponse(res)).then(res => {\n      setImageUrl(res.avatar);\n    }).catch(err => {\n      showError(err);\n    });\n  };\n\n  useEffect(load, []);\n  EventBus.addEventListener(\"reload_avatar_uploader\", load);\n\n  const handleChange = info => {\n    console.log(info);\n\n    if (info.file.status === 'uploading') {\n      setLoading(true);\n      return;\n    }\n\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      setImageUrl(info.file.url);\n      setLoading(false);\n      setUploaded(true);\n    }\n  };\n\n  const uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8\n      },\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n\n  const update = async () => {\n    if (uploaded) {\n      await fetch(\"http://localhost:4000/avatar\", {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          avatar: imageUrl\n        })\n      }).then(res => handleResponse(res)).then(() => {\n        message.success(\"Update successfully!\", 1);\n        EventBus.dispatchEvent(\"reload_min_profile\");\n        EventBus.dispatchEvent(\"reload_articles\");\n      }).catch(err => showError(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Upload, {\n      name: \"avatar\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: \"http://localhost:4000/upload/image\",\n      beforeUpload: beforeUpload,\n      onChange: handleChange,\n      children: imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"avatar\",\n        style: {\n          width: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this) : uploadButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: update,\n      children: \"Click here to update the new avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AvatarUploader, \"doavD8pIR+lzV6SidDI0HAVONtM=\");\n\n_c = AvatarUploader;\nexport default AvatarUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvatarUploader\");","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/final-frontend-willwang1998-copy/src/component/AvatarUploader.js"],"names":["React","useEffect","useState","beforeUpload","handleResponse","showError","EventBus","LoadingOutlined","PlusOutlined","Button","message","Upload","AvatarUploader","loading","setLoading","imageUrl","setImageUrl","uploaded","setUploaded","load","fetch","method","credentials","then","res","avatar","catch","err","addEventListener","handleChange","info","console","log","file","status","url","uploadButton","marginTop","update","headers","body","JSON","stringify","success","dispatchEvent","width"],"mappings":"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","sourcesContent":["// TODO: Uploader animation\nimport React, {useEffect, useState} from \"react\";\nimport {beforeUpload, handleResponse, showError} from \"../util/Functions\";\nimport EventBus from \"../util/EventBus\";\nimport {LoadingOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport {Button, message, Upload} from \"antd\";\n\nconst AvatarUploader = () => {\n    const [loading, setLoading] = useState(false);\n    const [imageUrl, setImageUrl] = useState('');\n    const [uploaded, setUploaded] = useState(false);\n\n    const load = async () => {\n        await fetch(\"http://localhost:4000/avatar\", {\n            method: \"GET\",\n            credentials: \"include\",\n        }).then(res => handleResponse(res)).then(res => {\n            setImageUrl(res.avatar);\n        }).catch(err => {\n            showError(err);\n        });\n    };\n    useEffect(load, []);\n    EventBus.addEventListener(\"reload_avatar_uploader\", load);\n\n    const handleChange = (info) => {\n        console.log(info);\n        if (info.file.status === 'uploading') {\n            setLoading(true);\n            return;\n        }\n        if (info.file.status === 'done') {\n            // Get this url from response in real world.\n            setImageUrl(info.file.url);\n            setLoading(false);\n            setUploaded(true);\n        }\n    };\n\n    const uploadButton = (\n        <div>\n            {loading ? <LoadingOutlined /> : <PlusOutlined />}\n            <div style={{ marginTop: 8 }}>Upload</div>\n        </div>\n    );\n\n    const update = async () => {\n        if (uploaded) {\n            await fetch(\"http://localhost:4000/avatar\", {\n                method: \"PUT\",\n                credentials: \"include\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    avatar: imageUrl,\n                }),\n            }).then(res => handleResponse(res)).then(() => {\n                message.success(\"Update successfully!\", 1);\n                EventBus.dispatchEvent(\"reload_min_profile\");\n                EventBus.dispatchEvent(\"reload_articles\");\n            }).catch(err => showError(err));\n        }\n    };\n\n    return (\n        <>\n            <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                className=\"avatar-uploader\"\n                showUploadList={false}\n                action=\"http://localhost:4000/upload/image\"\n                beforeUpload={beforeUpload}\n                onChange={handleChange}\n            >\n                {imageUrl ? (\n                    <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} />\n                ) : (\n                    uploadButton\n                )}\n            </Upload>\n            <Button type=\"primary\" onClick={update}>\n                Click here to update the new avatar\n            </Button>\n        </>\n    );\n};\n\nexport default AvatarUploader;\n"]},"metadata":{},"sourceType":"module"}