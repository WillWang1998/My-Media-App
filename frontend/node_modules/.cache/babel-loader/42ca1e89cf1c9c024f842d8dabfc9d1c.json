{"ast":null,"code":"import { LOG_IN, REGISTER, LOG_OUT, POST, SEARCH, ADD_NEW_FOLLOWING, UNFOLLOW, UPDATE_INFO, UPDATE_PASSWORD, CHANGE_TAB, UPDATE_STATUS } from \"./actions\";\nimport { addPost, addUser, checkUserNamePassword, getFollowingsAndSelfPosts, getNewPostID, getNewUserID, initialState, updateUser, userNameIdMap, userNameInfoMap, userNamePasswordMap } from \"./fake_backend\";\nexport function myMediaApp(state = initialState, action) {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        let userName = action.values.userName;\n        let password = action.values.password;\n\n        if (checkUserNamePassword(userName, password)) {\n          window.localStorage.setItem(\"userName\", userName);\n          let info = userNameInfoMap.get(userName);\n          return { ...state,\n            isAuthenticated: true,\n            logInOrRegisterMessage: \"Successful login!\",\n            id: userNameIdMap[userName],\n            menuState: \"home\",\n            userName: userName,\n            avatar: info.avatar,\n            email: info.email,\n            phone: info.phone,\n            DOB: info.DOB,\n            zipcode: info.zipcode,\n            displayName: info.displayName,\n            followings: info.followings,\n            status: info.status,\n            selectedPosts: getFollowingsAndSelfPosts(userName, info.followings)\n          };\n        } else {\n          return { ...state,\n            logInOrRegisterMessage: \"Please check your username and password!\"\n          };\n        }\n      }\n\n    case REGISTER:\n      {\n        let userName = action.values.userName; // TODO: backend checkers\n\n        if (userNamePasswordMap.has(userName)) {\n          return { ...state,\n            logInOrRegisterMessage: \"This username is in used!\"\n          };\n        } else {\n          window.localStorage.setItem(\"userName\", userName);\n          addUser(userName, action.values.email, action.values.phone, action.values.DOB, action.values.zipcode, action.values.displayName, action.values.password);\n          let info = userNameInfoMap.get(userName);\n          return { ...state,\n            isAuthenticated: true,\n            logInOrRegisterMessage: \"Successful register!\",\n            menuState: \"home\",\n            id: getNewUserID(),\n            userName: userName,\n            avatar: info.avatar,\n            email: info.email,\n            phone: info.phone,\n            DOB: info.DOB,\n            zipcode: info.zipcode,\n            displayName: info.displayName,\n            followings: info.followings,\n            status: info.status,\n            selectedPosts: getFollowingsAndSelfPosts(userName, info.followings)\n          };\n        }\n      }\n\n    case LOG_OUT:\n      {\n        window.localStorage.removeItem(\"userName\");\n        return { ...state,\n          isAuthenticated: false,\n          logInOrRegisterMessage: \"Successful logout!\",\n          menuState: \"logout\",\n          id: null,\n          userName: null,\n          avatar: null,\n          email: null,\n          phone: null,\n          DOB: null,\n          zipcode: null,\n          displayName: null,\n          followings: [],\n          status: null,\n          searchWord: \"\",\n          selectedPosts: []\n        };\n      }\n\n    case CHANGE_TAB:\n      {\n        return { ...state,\n          menuState: action.values.menuState\n        };\n      }\n\n    case UPDATE_STATUS:\n      {\n        return { ...state,\n          status: action.values.status\n        };\n      }\n\n    case POST:\n      {\n        addPost({\n          timestamp: new Date().valueOf(),\n          id: getNewPostID(),\n          userName: state.userName,\n          title: action.values.title,\n          body: action.values.body,\n          pictures: action.values.pictures,\n          avatar: state.avatar\n        });\n        let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, state.followings);\n        return { ...state,\n          searchWord: \"\",\n          selectedPosts: newSelectedPosts\n        };\n      }\n\n    case SEARCH:\n      {\n        let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, state.followings, action.values.searchWord);\n        return { ...state,\n          searchWord: action.values.searchWord,\n          selectedPosts: newSelectedPosts\n        };\n      }\n\n    case ADD_NEW_FOLLOWING:\n      {\n        if (!state.followings.some(function (following) {\n          return following.userName === action.values.userName;\n        }) && userNamePasswordMap.has(action.values.userName) && action.values.userName !== state.userName) {\n          let newFollowings = [{\n            userName: action.values.userName,\n            avatar: userNameInfoMap.get(action.values.userName).avatar,\n            status: userNameInfoMap.get(action.values.userName).status\n          }];\n          state.followings.forEach(following => {\n            newFollowings.push(following);\n          });\n          let temp = userNameInfoMap.get(state.userName);\n          temp.followings = newFollowings;\n          userNameInfoMap.set(state.userName, temp);\n          let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, newFollowings);\n          return { ...state,\n            followings: newFollowings,\n            selectedPosts: newSelectedPosts\n          };\n        } else {\n          return { ...state,\n            addFollowingMessage: \"This user doesn't exist.\"\n          };\n        }\n      }\n\n    case UNFOLLOW:\n      {\n        let newFollowings = [];\n        let i = 0;\n\n        for (; i < state.followings.length; ++i) {\n          if (state.followings[i].userName !== action.values.userName) {\n            newFollowings.push(state.followings[i]);\n          }\n        }\n\n        let temp = userNameInfoMap.get(state.userName);\n        temp.followings = newFollowings;\n        userNameInfoMap.set(state.userName, temp);\n        let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, newFollowings);\n        return { ...state,\n          followings: newFollowings,\n          selectedPosts: newSelectedPosts\n        };\n      }\n\n    case UPDATE_INFO:\n      {\n        updateUser(state.userName, action.values);\n        return { ...state,\n          isUpdateSuccessful: true,\n          updateProfileMessage: \"Successful update!\",\n          email: action.values.email,\n          status: action.values.status,\n          phone: action.values.phone,\n          DOB: action.values.DOB,\n          zipcode: action.values.zipcode,\n          displayName: action.values.displayName\n        };\n      }\n\n    case UPDATE_PASSWORD:\n      {\n        if (userNamePasswordMap.get(state.userName) !== action.values.curPassword) {\n          return { ...state,\n            isUpdateSuccessful: false,\n            updateProfileMessage: \"Please check your current password!\"\n          };\n        } else {\n          userNamePasswordMap.set(state.userName, action.values.newPassword);\n          return { ...state,\n            isUpdateSuccessful: true,\n            updateProfileMessage: \"Successful update!\"\n          };\n        }\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/willwang98/Rice Homework/hw6-frontend-WillWang1998/src/reducers.js"],"names":["LOG_IN","REGISTER","LOG_OUT","POST","SEARCH","ADD_NEW_FOLLOWING","UNFOLLOW","UPDATE_INFO","UPDATE_PASSWORD","CHANGE_TAB","UPDATE_STATUS","addPost","addUser","checkUserNamePassword","getFollowingsAndSelfPosts","getNewPostID","getNewUserID","initialState","updateUser","userNameIdMap","userNameInfoMap","userNamePasswordMap","myMediaApp","state","action","type","userName","values","password","window","localStorage","setItem","info","get","isAuthenticated","logInOrRegisterMessage","id","menuState","avatar","email","phone","DOB","zipcode","displayName","followings","status","selectedPosts","has","removeItem","searchWord","timestamp","Date","valueOf","title","body","pictures","newSelectedPosts","some","following","newFollowings","forEach","push","temp","set","addFollowingMessage","i","length","isUpdateSuccessful","updateProfileMessage","curPassword","newPassword"],"mappings":"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","sourcesContent":["import {\n    LOG_IN,\n    REGISTER,\n    LOG_OUT,\n    POST,\n    SEARCH,\n    ADD_NEW_FOLLOWING,\n    UNFOLLOW,\n    UPDATE_INFO,\n    UPDATE_PASSWORD,\n    CHANGE_TAB,\n    UPDATE_STATUS\n} from \"./actions\";\nimport {\n    addPost,\n    addUser,\n    checkUserNamePassword,\n    getFollowingsAndSelfPosts, getNewPostID, getNewUserID,\n    initialState,\n    updateUser,\n    userNameIdMap,\n    userNameInfoMap, userNamePasswordMap\n} from \"./fake_backend\";\n\nexport function myMediaApp(state = initialState, action) {\n    switch (action.type) {\n        case LOG_IN: {\n            let userName = action.values.userName;\n            let password = action.values.password;\n            if (checkUserNamePassword(userName, password)) {\n                window.localStorage.setItem(\"userName\", userName);\n                let info = userNameInfoMap.get(userName);\n                return {\n                    ...state,\n                    isAuthenticated: true,\n                    logInOrRegisterMessage: \"Successful login!\",\n                    id: userNameIdMap[userName],\n                    menuState: \"home\",\n                    userName: userName,\n                    avatar: info.avatar,\n                    email: info.email,\n                    phone: info.phone,\n                    DOB: info.DOB,\n                    zipcode: info.zipcode,\n                    displayName: info.displayName,\n                    followings: info.followings,\n                    status: info.status,\n                    selectedPosts: getFollowingsAndSelfPosts(userName, info.followings)\n                }\n            } else {\n                return {\n                    ...state,\n                    logInOrRegisterMessage: \"Please check your username and password!\",\n                };\n            }\n        }\n        case REGISTER: {\n            let userName = action.values.userName;\n            // TODO: backend checkers\n            if (userNamePasswordMap.has(userName)) {\n                return {\n                    ...state,\n                    logInOrRegisterMessage: \"This username is in used!\",\n                };\n            } else {\n                window.localStorage.setItem(\"userName\", userName);\n                addUser(userName,\n                    action.values.email,\n                    action.values.phone,\n                    action.values.DOB,\n                    action.values.zipcode,\n                    action.values.displayName,\n                    action.values.password);\n                let info = userNameInfoMap.get(userName);\n                return {\n                    ...state,\n                    isAuthenticated: true,\n                    logInOrRegisterMessage: \"Successful register!\",\n                    menuState: \"home\",\n                    id: getNewUserID(),\n                    userName: userName,\n                    avatar: info.avatar,\n                    email: info.email,\n                    phone: info.phone,\n                    DOB: info.DOB,\n                    zipcode: info.zipcode,\n                    displayName: info.displayName,\n                    followings: info.followings,\n                    status: info.status,\n                    selectedPosts: getFollowingsAndSelfPosts(userName, info.followings)\n                }\n            }\n        }\n        case LOG_OUT: {\n            window.localStorage.removeItem(\"userName\");\n            return {\n                ...state,\n                isAuthenticated: false,\n                logInOrRegisterMessage: \"Successful logout!\",\n                menuState: \"logout\",\n                id: null,\n                userName: null,\n                avatar: null,\n                email: null,\n                phone: null,\n                DOB: null,\n                zipcode: null,\n                displayName: null,\n                followings: [],\n                status: null,\n                searchWord: \"\",\n                selectedPosts: []\n            }\n        }\n        case CHANGE_TAB: {\n            return {\n                ...state,\n                menuState: action.values.menuState,\n            }\n        }\n        case UPDATE_STATUS: {\n            return {\n                ...state,\n                status: action.values.status,\n            }\n        }\n        case POST: {\n            addPost({\n                timestamp: (new Date()).valueOf(),\n                id: getNewPostID(),\n                userName: state.userName,\n                title: action.values.title,\n                body: action.values.body,\n                pictures: action.values.pictures,\n                avatar: state.avatar,\n            });\n            let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, state.followings);\n            return {\n                ...state,\n                searchWord: \"\",\n                selectedPosts: newSelectedPosts,\n            }\n        }\n        case SEARCH: {\n            let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, state.followings, action.values.searchWord);\n            return {\n                ...state,\n                searchWord: action.values.searchWord,\n                selectedPosts: newSelectedPosts,\n            }\n        }\n        case ADD_NEW_FOLLOWING: {\n            if (!state.followings.some(\n                function (following) {\n                    return following.userName === action.values.userName;\n                }\n            ) && userNamePasswordMap.has(action.values.userName) && action.values.userName !== state.userName) {\n                let newFollowings = [{\n                    userName: action.values.userName,\n                    avatar: userNameInfoMap.get(action.values.userName).avatar,\n                    status: userNameInfoMap.get(action.values.userName).status,\n                }];\n                state.followings.forEach((following) => {\n                    newFollowings.push(following)\n                });\n                let temp = userNameInfoMap.get(state.userName);\n                temp.followings = newFollowings;\n                userNameInfoMap.set(state.userName, temp);\n                let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, newFollowings);\n                return {\n                    ...state,\n                    followings: newFollowings,\n                    selectedPosts: newSelectedPosts,\n                }\n            } else {\n                return {\n                    ...state,\n                    addFollowingMessage: \"This user doesn't exist.\"\n                };\n            }\n        }\n        case UNFOLLOW: {\n            let newFollowings = [];\n            let i = 0;\n            for (; i < state.followings.length; ++i) {\n                if (state.followings[i].userName !== action.values.userName) {\n                    newFollowings.push(state.followings[i]);\n                }\n            }\n            let temp = userNameInfoMap.get(state.userName);\n            temp.followings = newFollowings;\n            userNameInfoMap.set(state.userName, temp);\n            let newSelectedPosts = getFollowingsAndSelfPosts(state.userName, newFollowings);\n            return {\n                ...state,\n                followings: newFollowings,\n                selectedPosts: newSelectedPosts\n            }\n        }\n        case UPDATE_INFO: {\n            updateUser(state.userName, action.values);\n            return {\n                ...state,\n                isUpdateSuccessful: true,\n                updateProfileMessage: \"Successful update!\",\n                email: action.values.email,\n                status: action.values.status,\n                phone: action.values.phone,\n                DOB: action.values.DOB,\n                zipcode: action.values.zipcode,\n                displayName: action.values.displayName,\n            }\n        }\n        case UPDATE_PASSWORD: {\n            if (userNamePasswordMap.get(state.userName) !== action.values.curPassword) {\n                return {\n                    ...state,\n                    isUpdateSuccessful: false,\n                    updateProfileMessage: \"Please check your current password!\"\n                }\n            } else {\n                userNamePasswordMap.set(state.userName, action.values.newPassword);\n                return {\n                    ...state,\n                    isUpdateSuccessful: true,\n                    updateProfileMessage: \"Successful update!\",\n                };\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}